<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center the window one frame after resize
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reactivate instances
if(!is_message() ) {
    instance_activate_all();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up views to be screen width * 640 and centered
view_set_size();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Messages and other initializations
switch(room) {
    case rIntro:
        message_add("Abby: This field trip is boring... Want to go exporing?#(Tip: Press enter to continue)");
        message_add("Elliot: Uhh... I don't know if that's a good idea...");
        message_add("Abby: But you have to admit, this is really boring.");
        message_add("Elliot: Yeah it is... Let's go.");
        break;
    case rStart:
        message_add("Abby: Umm... I think we're lost. Do you remember how to get back?");
        message_add("Elliot: No... This can't be good. Let's just walk to the right until we see something familiar.");
        message_add("Tip: Move using the WASD keys.");
        break;
    case rRiver:
        message_add("(quiet voice): I think they're lost... should we help?");
        message_add("(grumpy voice): I want to eat them. Can we eat them instead?");
        message_add("(quiet voice): SHHH! Don't let them hear you. You'll scare them away. And no, we can't eat them. I'll go talk to them.");
        break;
    case rHungry:
        message_add("(grumpy voice): I'm getting really hungry... Can't we eat them? Or just one of them?");
        message_add("Monster: No. We are not eating them. You know he wouldn't approve.");
        message_add("(grumpy voice): Fine. ");
        message_add("Elliot: I don't like the sound of that other monster. And now I'm hungry too. I don't think I can walk any further without something to eat.");
        Friend.hungry = true;
        break;
    case rGate:
        message_add("Elliot: Is that a fence? I don't remember seeing that on the way here...");
        message_add("Abby: Neither do I. This is weird.");
        break;
    case rHeart:
        message_add("Elliot: Are we there yet?");
        message_add("Abby: No.");
        break;
    case rFinal:
        message_add("Abby: The forest is thinning out. I think we're almost through!");
        message_add("Elliot: About time... I'm starting to get hungry again. Do you have any more of those apples?");
        if(C.apples) {
            message_add("Abby: Yeah, have this one.");
            message_add("Elliot: Thanks.");
        } else {
            message_add("Abby: No you ate them all earlier.");
            message_add("Elliot: Oh right.");
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
message_init();
pauseImg = noone;
metMonster = false;
metForest = false;
secret = 0;
apples = 0;
hasStone = false;
audio_play_sound(mBGM, 0, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw messages and pause game
//Only draw messages if there are some
if(is_message()) {
    /* Pause the rest of the game while messages exist.
    If you don't want that to happen, delete this -&gt; 
    if(!sprite_exists(pauseImg)) {
        //Get an image of the screen
        pauseImg = sprite_create_from_screen(window_get_x(), window_get_y(), view_wview[0], view_hview[0], false, false, 0, 0);
        //And stop all actions, not including this one
        instance_deactivate_all(true);
    }
    //Draw the pause sprite
    draw_sprite(pauseImg, 0, view_xview[0], view_yview[0]);
    /* End point for comment */
    message_draw();
} else {
    //Clear the sprite from memory
    if(sprite_exists(pauseImg)) {
        sprite_delete(pauseImg);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw apples if there are some
if(room == rHungry) {
    if(apples) {
        draw_set_color(c_black);
        draw_set_alpha(0.6);
        draw_rectangle(0, view_hview[0] - 64, view_wview[0], view_hview[0], false);
        draw_set_alpha(1);
    }
    for(var i = 0; i &lt; apples; i++) {
        draw_sprite(sApple, 0, 16 + 32 * i, view_hview[0] - 48);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw stone in rGate
if(room == rGate) {
    if(hasStone) {
        draw_set_color(c_black);
        draw_set_alpha(0.6);
        draw_rectangle(0, view_hview[0] - 128, view_wview[0], view_hview[0], false);
        draw_set_alpha(1);
        draw_sprite(sStone, 0, 16 + 48, view_hview[0] - 112 + 48);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw title screen text
if(room == rTitle) {
    draw_set_font(fLarge);
    draw_text(32, 16, "Abby and Elliot");
    draw_set_font(fMed);
    draw_text(32, 64, "Press &lt;Enter&gt; to begin.#&lt;Esc&gt; to quit at any time.#&lt;F4&gt; toggles fullscreen.");
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw end screen text
if(room == rEnd) {
    draw_set_halign(fa_right);
    draw_set_color(c_black);
    draw_set_font(fLarge);
    var str;
    str = "And off they went.";
    draw_text(view_wview[0] - 32, 16, str);
    draw_set_font(fMed);
    str = "The rest of the class was relieved that the Abby and Elliot had returned safely.#" + 
    "The two never forgot about the monsters in the Forest, and how the Forest had saved them.#" + 
    "Eventually, Elliot even overcame his fear and returned to the Forest years later.# " +
    "He brought Abby along just in case.";
    draw_text(view_wview[0] - 32, 64, str);
    draw_set_font(fNyala);
    str = "Created in 72 hours for the GMC Jam \#11 (July 27-29, 2013)#Programming by Cameron Eldridge (thegame). Graphics by Pearl Qiu. Music by Jack &amp; The Vox Productions (Yix777)";
    draw_text(view_wview[0] - 32, view_hview[0] - 64, str);
    draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle fullscreen
window_set_fullscreen(!window_get_fullscreen());
view_set_size();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Quit
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Secret messages
if(instance_exists(Player)) {
    if(!is_message() &amp;&amp; !Player.timeline_running) {
        switch(secret) {
            case 0:
                message_add("Elliot: We're lost!!!!!!!");
                message_add("Abby: No, really...");
                break;
            case 1:
                message_add("Elliot: We should have stuck with the class...");
                message_add("Abby: But... it was SOOOOOO boring.");
                break;  
            case 2:
                message_add("Abby: Knock, knock.");
                message_add("Elliot: Who's there?");
                message_add("Abby: Who.");
                message_add("Elliot: Who who?");
                message_add("Owl: Hooooooo.... Hoot!");
                break;
            case 3:
                message_add("Elliot: Remember that time when we did that thing, and then that happened, and then... AHAHAHA");
                message_add("Abby: Uhh... Yes? No? I'm not sure which time you mean.");
                message_add("Elliot: Never mind.");
                break;
            case 4:
                message_add("Elliot: It's dangerous to go alone! Take this.");
                message_add("Abby: Take what?");
                message_add("Elliot: But our princess is in another castle!");
                message_add("Abby: What princess?");
                message_add("Elliot: Do a barrel roll!");
                break;
            case 5:
                message_add("Abby: Do you have that feeling that someone's watching you?");
                message_add("Elliot: Oh. Sorry...");
                break;
            case 6:
                message_add("Elliot (singing): 99 bottles of beer on the wall... 99 bottles of beer! Take one down, pass it around. 98 bottles of beer on the wall.");
                message_add("Elliot (singing): 98 bottles of beer on the wall... 98 bottles of beer! Take one down, pass it around. 97 bottles of beer on the wall.");
                message_add("Elliot (singing): 97 bottles of beer on the wall... 97 bottles of beer! Take one down, pass it around. 96 bottles of beer on the wall.");
                message_add("Elliot (singing): 96 bottles of beer on the wall... 96 bottles of beer! Take one down, pass it around. 95 bottles of beer on the wall.");
                message_add("Elliot (singing): 95 bottles of beer on the wall... 95 bottles of beer! Take one down, pass it around. 94 bottles of beer on the wall.");
                message_add("Elliot (singing): 94 bottles of beer on the wall... 94 bottles of beer! Take one down, pass it around. 93 bottles of beer on the wall.");
                message_add("Abby: You can stop that now.");
                message_add("Elliot: Not yet. I'm only at 93.");
                message_add("Elliot (singing): 93 bottles of beer on the wall... 93 bottles of beer! Take one down, pass it around. 92 bottles of beer on the wall.");
                message_add("Elliot (singing): 92 bottles of beer on the wall... 92 bottles of beer! Take one down, pass it around. 91 bottles of beer on the wall.");
                break;
            case 7:
                if(metMonster) {
                    message_add("Elliot: I wonder how many monsters there are in this forest. Or if there are more than just monsters. Maybe there are axe murderers or something in here too.");
                    message_add("Abby: I doubt there are axe murderers. The monsters would scare them away.");
                } else {
                    secret--;
                }
                break;
            case 8:
                message_add("Elliot: *gasp* What was that?");
                message_add("Abby: It's just a monster...");
                message_add("Elliot: *gasp* Well then what was that?");
                message_add("Abby: ALSO a monster. This forest is full of them.");
                message_add("Elliot: *gasp* I think I saw something in that tree!");
                break;
            case 9:
                message_add("Abby: Do you think the monsters have names?");
                message_add("Elliot: Probably not...");
                message_add("Abby: If they did, what do you think our monster would be called?");
                message_add("Elliot: I'm not sure if I'd consider him OUR monster... but probably something like Glaeibnsekd.");
                message_add("Glaeibnsekd: Did someone call me?");
                message_add("Abby: Well... I guess that's not his name...");
                break;
            case 10:
                message_add("Elliot: What kind of stupid school takes their kids to a forest, and then doesn't tell the kids to not go wandering off?");
                message_add("Abby: Ours obviously...");
                break;
        }
        secret++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove message, or skip to end
if(is_message()) {
    if(pos &lt; string_length(message_read())) {
        pos = string_length(message_read());
    } else {
        message_remove();
        //Put a sound here if you want one when the messages are closed
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start game if in the title screen
if(room == rTitle) {
    room_goto_next();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
