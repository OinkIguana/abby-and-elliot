<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
messageSaid = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Position limits
if(!timeline_running) {
    y = clamp(y, 432, 640);
}
if(room != rIntro) {
    x = max(x, 0);
    if(x == 0) {
        hspeed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Realistic depth
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move horizontally and vertically
if(!is_message() &amp;&amp; !timeline_running &amp;&amp; hspeed != -4) {
    //Prioritize WASD controls, but accept arrows too
    hspeed = (keyboard_check(ord("D")) - keyboard_check(ord("A"))) * 6;
    if(hspeed == 0) {
        hspeed = (keyboard_check(vk_right) - keyboard_check(vk_left)) * 6;
    }
    while(place_meeting(x + hspeed, y, Wall) ) {
        hspeed -= sign(hspeed);
    }
    vspeed = (keyboard_check(ord("S")) - keyboard_check(ord("W"))) * 3;
    if(vspeed == 0) {
        vspeed = (keyboard_check(vk_down) - keyboard_check(vk_up)) * 3;
    }
    while(place_meeting(x + hspeed, y + vspeed, Wall) ) {
        vspeed -= sign(vspeed);
    }
} else {
    if(timeline_index != lOpenGate) {
        hspeed = 0;
        vspeed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Actions depending on room
switch(room) {
    case rIntro:
        if(!is_message() ) {
            hspeed = -6;
        } 
        if(Friend.bbox_right &lt; 0) {
            room_goto_next();
        }
        break;
    case rStart:
        if(Friend.bbox_left &gt; 1200 &amp;&amp; !messageSaid) {
            message_add("(quiet voice): What are these kids doing alone in our forest..?");
            message_add("Elliot: EEK! Did you hear that? Let's get out of here!");
            messageSaid = true;
        } else if(!is_message() &amp;&amp; messageSaid) {
            hspeed = 10;
            if(Friend.bbox_left &gt; room_width) {
                room_goto_next();
            }
        }
        break;
    case rRiver:
        if(x &gt; 600 &amp;&amp; !C.metMonster) {
            timeline_index = lMonsterMeeting;
            timeline_running = true;
            timeline_speed = 1;
            C.metMonster = true;
        } else if(x &gt; 1600 &amp;&amp; !messageSaid) {
            message_add("Abby: That's a nice monster.");
            message_add("Elliot: I'm still scared of him. I hope he isn't leading us to a whole pack of them...")
            messageSaid = true;
        } else if(!is_message() &amp;&amp; messageSaid) {
            hspeed = 6;
            if(Friend.bbox_left &gt; room_width) {
                room_goto_next();
            }
        }
        break;
    case rHungry:
        if(x &gt; 1800 &amp;&amp; Friend.hungry) {
            message_add("Abby: I can't leave Elliot alone in this forest...");
            hspeed = -4;
        }
        if(distance_to_object(Friend) &lt; 50 &amp;&amp; C.apples &amp;&amp; Friend.hungry) {
            message_add("Abby: I got some apples for you! Can we continue now?");
            message_add("Elliot: Where did you get the apples from?");
            message_add("Abby: The monster helped get them from a tree. Literally 5 metres away from you. Didn't you see?");
            message_add("Elliot: Uh... No... I didn't.");
            message_add("&gt; He eats the apples");
            message_add("Elliot: Those were really good. I hope the monster didn't poison them or something. Let's get going.");
            C.apples = 0;
            Friend.hungry = false;
        } else if(!Friend.hungry &amp;&amp; Player.x &gt; 1500 &amp;&amp; !messageSaid) {
            message_add("(grumpy voice): Why do they get to eat, but I'm not allowed.");
            message_add("Monster: Because they are eating fruits, which are meant to be eaten. NOT each other.");
            message_add("(grumpy voice): Yuck, plants. I want meat. Please can we eat them? Even just a hand or something?");
            message_add("Monster: You'd best not be insulting plants around here. And no, they are not to be harmed.");
            messageSaid = true;
        } else if(!is_message() &amp;&amp; messageSaid) {
            hspeed = 6;
            if(Friend.bbox_left &gt; room_width) {
                room_goto_next();
            }
        }
        break;
    case rHeart:
        if(x &gt; 1700 &amp;&amp; !C.metForest) {
            message_add("(deep voice): Do not go that way yet, children...");
            hspeed = -4;
        }
        if(Player.x &gt; 1800 &amp;&amp; !messageSaid) {
            message_add("Abby: This is so strange... I'm glad we went exploring though.");
            message_add("Elliot: I hope the class isn't worried about us.");
            message_add("Abby: They probably are. Let's hurry.");
            messageSaid = true;
        } else if(!is_message() &amp;&amp; messageSaid) {
            hspeed = 6;
            if(Friend.bbox_left &gt; room_width) {
                room_goto_next();
            }
        }
        break;
    case rFinal:
        if(x &gt; 500 &amp;&amp; messageSaid == 0) {
            message_add("Abby: I'm going to miss these monsters. I liked them.");
            message_add("Elliot: They freak me out. Can we go faster?");
            messageSaid = 1;
        } else if(x &gt; 1000 &amp;&amp; messageSaid == 1) {
            message_add("Abby: Who knew forests had spirits. I always thought they were just trees.");
            message_add("Elliot: Do you think they would give us wood if we asked them? We could change the lumber industry forever!");
            message_add("Abby: OR! We could SAVE the forests. STOP killing them all.");
            messageSaid = 2;
        } else if(x &gt; 1500 &amp;&amp; messageSaid == 2) {
            message_add("Abby: I want to go meet more monsters. Maybe in another forest. Hopefully they're as nice as this one.");
            message_add("Forest: Some are, though I would be careful. Some monsters would eat you without a second thought.");
            message_add("(grumpy voice): Then why can't I!!!");
            message_add("Elliot: Just so we're clear, if you do decide to explore other forests, I'm NOT going with you.");
            messageSaid = 3;
        } else if(x &gt; 1900 &amp;&amp; messageSaid == 3) {
            message_add("Abby: Thanks for all your help Monster. I hope I can visit soon!");
            message_add("Elliot: I can see our class. I'm not spending any more time here...");
            messageSaid = 4;
        } else if(messageSaid == 4 &amp;&amp; !is_message() ) {
            hspeed = 6;
            if(Friend.bbox_left &gt; room_width) {
                room_goto_next();
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run animation
var prevScale = image_xscale;
image_xscale = sign(hspeed);
if(image_xscale == 0) {
    image_xscale = prevScale;
}
if(hspeed != 0 || vspeed != 0) {
    image_speed = 1/4;
} else {
    image_speed = 0;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do actions with nearest object
if(!is_message() &amp;&amp; C.metMonster &amp;&amp; !timeline_running) {
    if(room == rGate &amp;&amp; !instance_exists(StoneNo)) {
        var inst = instance_nearest(x, y, _WithAction);
        if(distance_to_object(inst) &lt; 32) {
            inst.doAction = true;
        }
    } else {
        timeline_index = lCallMonster;
        timeline_running = true;
        timeline_speed = 1;
        timeline_position = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
